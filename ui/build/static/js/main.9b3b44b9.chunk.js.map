{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","waves","setWaves","message","setMessage","checkWalletConnection","a","window","ethereum","request","method","accounts","length","account","console","log","error","connectWallet","alert","wave","contractAddress","contractABI","ETHEREUM_WAVE_ABI","abi","provider","ethers","providers","Web3Provider","getSigner","signer","ethereumWaveContract","Contract","waveTxn","hash","getAllWaves","useEffect","formattedWaves","map","item","address","waver","timeStamp","Date","fetchWaves","content","index","key","className","toLocaleString","role","aria-label","name","rows","cols","onChange","e","target","value","placeholder","onClick","ReactDOM","render","document","getElementById"],"mappings":"svmBAMe,SAASA,IACtB,MAA4CC,qBAA5C,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,qBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAqB,uCAAG,kCAAAC,EAAA,oEAELC,OAAbC,EAFkB,EAElBA,SAFkB,iEAKHA,EAASC,QAAQ,CAAEC,OAAQ,iBALxB,OAMF,KADlBC,EALoB,QAMbC,SACLC,EAAUF,EAAS,GACzBG,QAAQC,IAAI,8BAA+BF,GAC3Cb,EAAkBa,IATM,kDAY1BC,QAAQE,MAAR,MAZ0B,0DAAH,qDAgBrBC,EAAa,uCAAG,gCAAAX,EAAA,wEAEGC,QAAbC,EAFU,EAEVA,WAGNU,MACE,4GANc,SASKV,EAASC,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAYlBG,QAAQC,IAAI,mBAAoBJ,EAAS,IACzCX,EAAkBW,EAAS,IAbT,kDAelBG,QAAQE,MAAR,MAfkB,0DAAH,qDAmBbG,EAAI,uCAAG,0CAAAb,EAAA,+DACUC,QAAbC,EADG,EACHA,WACOM,QAAQE,MAAM,+CAEvBI,EAAkB,6CAClBC,EAAcC,EAAkBC,IAL3B,SAQHC,EAAW,IAAIC,IAAOC,UAAUC,aAAanB,GAR1C,SASYgB,EAASI,YATrB,cASHC,EATG,OAUHC,EAAuB,IAAIL,IAAOM,SACtCX,EACAC,EACAQ,GAbO,UAgBaC,EAAqBX,KAAKhB,GAhBvC,QAgBH6B,EAhBG,OAiBTlB,QAAQC,IAAI,iBAAkBiB,EAAQC,MAjB7B,kDAmBTnB,QAAQC,IAAI,SAAZ,MAnBS,0DAAH,qDAuBJmB,EAAW,uCAAG,0CAAA5B,EAAA,+DACGC,QAAbC,EADU,EACVA,WACOM,QAAQE,MAAM,+CAEvBI,EAAkB,6CAClBC,EAAcC,EAAkBC,IALpB,SAQVC,EAAW,IAAIC,IAAOC,UAAUC,aAAanB,GARnC,SASKgB,EAASI,YATd,cASVC,EATU,OAUVC,EAAuB,IAAIL,IAAOM,SACtCX,EACAC,EACAQ,GAbc,UAgBEC,EAAqBI,cAhBvB,eAgBZjC,EAhBY,yBAkBTA,GAlBS,kCAoBhBa,QAAQC,IAAI,SAAZ,MApBgB,0DAAH,qDAwBjBoB,qBAAU,WACR9B,IAEgB,uCAAG,8BAAAC,EAAA,sEACG4B,IADH,OACXjC,EADW,OAEXmC,EACJnC,GACAA,EAAMoC,KAAI,SAACC,GACT,MAAO,CACLC,QAASD,EAAKE,MACdrC,QAASmC,EAAKnC,QACdsC,UAAW,IAAIC,KAAsB,IAAjBJ,EAAKG,eAI/BvC,EAASkC,GAZQ,2CAAH,oDAehBO,KACC,IAEH,IAIMC,EACJ3C,GACAA,EAAMoC,KAAI,SAAClB,EAAM0B,GACf,OACE,wBAAIC,IAAG,UAAK3B,EAAKoB,QAAV,YAAqBM,GAASE,UAAU,aAC7C,6BAASA,UAAU,gBACjB,6BAASA,UAAU,gBACjB,0BAAMA,UAAU,aAAa5B,EAAKhB,UAEpC,6BAAS4C,UAAU,gBACjB,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAa5B,EAAKoB,UAEpC,6BAASQ,UAAU,mBACjB,0BAAMA,UAAU,cAAhB,SACA,0BAAMA,UAAU,aACb5B,EAAKsB,UAAUO,wBAQ9B,OACE,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,UACb,0BAAME,KAAK,MAAMC,aAAW,SAA5B,iCAKF,6BAASH,UAAU,iBACjB,yBAAKA,UAAU,OAAf,kDAIA,yBAAKA,UAAU,OAAf,sIAGE,0BAAME,KAAK,MAAMC,aAAW,QAAQH,UAAU,SAA9C,iBAKF,yBAAKA,UAAU,eAAf,eACe9C,GAASA,EAAMW,OAAS,EAAIX,EAAMW,OAAS,EACvDX,GAASA,EAAMW,OAAS,EACvB,0BAAMqC,KAAK,MAAMC,aAAW,QAAQH,UAAU,SAA9C,gBAIA,0BAAME,KAAK,MAAMC,aAAW,QAAQH,UAAU,SAA9C,kBAON,0BAAMA,UAAU,QACd,2BAAOA,UAAU,cACf,wBAAIA,UAAU,iBAAd,cAEE,0BAAME,KAAK,MAAMC,aAAW,QAAQH,UAAU,SAA9C,4BAFF,wBAOA,8BACEA,UAAU,mBACVI,KAAK,UACLC,KAAK,KACLC,KAAK,KACLC,SA9ES,SAACC,GACpBnD,EAAWmD,EAAEC,OAAOC,QA8EVC,YAAavD,MAInB,yBAAK4C,UAAU,gBACb,4BAAQA,UAAU,cAAcY,QAASxC,GAAzC,eAIEpB,GACA,4BAAQgD,UAAU,cAAcY,QAAS1C,GAAzC,oBAMN,wBAAI8B,UAAU,aAAaH,IC5MjCgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9b3b44b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport ETHEREUM_WAVE_ABI from \"./EthereumWave.json\";\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState();\n  const [waves, setWaves] = useState([]);\n  const [message, setMessage] = useState(\"Type something...\");\n\n  const checkWalletConnection = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) return;\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Ethereum account connected:\", account);\n        setCurrentAccount(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum)\n        alert(\n          \"You must install MetaMask on your browser to use this app. Checkout https://metamask.io/ to get MetaMask\"\n        );\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Wallet connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    const { ethereum } = window;\n    if (!ethereum) console.error(\"Ethereum object not available. Get MetaMask\");\n\n    const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n    const contractABI = ETHEREUM_WAVE_ABI.abi;\n\n    try {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = await provider.getSigner();\n      const ethereumWaveContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      const waveTxn = await ethereumWaveContract.wave(message);\n      console.log(\"Wave Txn Hash:\", waveTxn.hash);\n    } catch (error) {\n      console.log(\"error:\", error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n    if (!ethereum) console.error(\"Ethereum object not available. Get MetaMask\");\n\n    const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n    const contractABI = ETHEREUM_WAVE_ABI.abi;\n\n    try {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = await provider.getSigner();\n      const ethereumWaveContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      let waves = await ethereumWaveContract.getAllWaves();\n\n      return waves;\n    } catch (error) {\n      console.log(\"error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletConnection();\n\n    const fetchWaves = async () => {\n      const waves = await getAllWaves();\n      const formattedWaves =\n        waves &&\n        waves.map((item) => {\n          return {\n            address: item.waver,\n            message: item.message,\n            timeStamp: new Date(item.timeStamp * 1000),\n          };\n        });\n\n      setWaves(formattedWaves);\n    };\n\n    fetchWaves();\n  }, []);\n\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const content =\n    waves &&\n    waves.map((wave, index) => {\n      return (\n        <li key={`${wave.address}-${index}`} className=\"wave-item\">\n          <article className=\"wave-content\">\n            <section className=\"wave-message\">\n              <span className=\"wave-text\">{wave.message}</span>\n            </section>\n            <section className=\"wave-address\">\n              <span className=\"wave-label\">Sender:</span>\n              <span className=\"wave-text\">{wave.address}</span>\n            </section>\n            <section className=\"wave-time-stamp\">\n              <span className=\"wave-label\">Date:</span>\n              <span className=\"wave-text\">\n                {wave.timeStamp.toLocaleString()}\n              </span>\n            </section>\n          </article>\n        </li>\n      );\n    });\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"data-container\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"emoji\">\n            👋 Hey, I'm George\n          </span>\n        </div>\n\n        <section className=\"bio-container\">\n          <div className=\"bio\">\n            A frontend developer based in Berlin, Germany.\n          </div>\n\n          <div className=\"bio\">\n            Connect your wallet then push the button \"Wave at me\" button to wave\n            at me. Your wave will live on the Ethereum blockchain, forever\n            <span role=\"img\" aria-label=\"emoji\" className=\"emoji\">\n              🤯\n            </span>\n          </div>\n\n          <div className=\"waves-count\">\n            Wave count: {waves && waves.length > 0 ? waves.length : 0}\n            {waves && waves.length > 0 ? (\n              <span role=\"img\" aria-label=\"emoji\" className=\"emoji\">\n                🥳\n              </span>\n            ) : (\n              <span role=\"img\" aria-label=\"emoji\" className=\"emoji\">\n                🥺\n              </span>\n            )}\n          </div>\n        </section>\n\n        <form className=\"form\">\n          <label className=\"form-label\">\n            <h3 className=\"form-headline\">\n              Send a wave\n              <span role=\"img\" aria-label=\"emoji\" className=\"emoji\">\n                👇🏽\n              </span>\n              . Send it with text!\n            </h3>\n            <textarea\n              className=\"comment-text-box\"\n              name=\"comment\"\n              rows=\"10\"\n              cols=\"50\"\n              onChange={handleChange}\n              placeholder={message}\n            />\n          </label>\n        </form>\n        <div className=\"button-group\">\n          <button className=\"wave-button\" onClick={wave}>\n            Wave at Me\n          </button>\n\n          {!currentAccount && (\n            <button className=\"wave-button\" onClick={connectWallet}>\n              Connect Wallet\n            </button>\n          )}\n        </div>\n      </div>\n      <ul className=\"wave-list\">{content}</ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}